# -*- coding: utf-8 -*-
"""is22_wdp_lab8b_rekurencja_moduły_funkcje_lambda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eOl8GWw8ews9UCbrOuzra-JSS-35eOX3

## Informatyka stosowana, WdP

#### Lab 8b: Rekurencja, funkcje lambda

#### Zadanie

Zdefniuj lambda funkcję 

- *nieparzyste(n)* zwracającą listę liczb nieparzystych od $0$ do podanej jako argument liczby $n$ włącznie. 
- liczy sześcian sumy argumentów
- liczy sumę pierwiastków argumentów
- daje odpowiedź True jeżeli argumenty są równe  False w przeciwnym razie
- generuje słownik złożony z argumentu i litery odpowiadającej po przesunięciu o 3 (porównaj szyfr Cezara)
"""

# przykłady
def silnia(n):
  if n==0:
    return 1
  else:
    return n*silnia(n-1)
# print(silnia(4))

# przykład
lista = []
n = 100
silnia_l = lambda i: lista.append(i) if(i%2 == 1) else None

for i in range(n):
  silnia_l(i)

# print(lista)


 # *nieparzyste(n)* zwracającą listę liczb nieparzystych od $0$ do podanej jako argument liczby $n$ włącznie.

# # n_liczba = int(input())
#
# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# n = int(input())
#
# num_new = []
#
# # for x in range(1,n+1):
# #   num_new.append(x)
#
# num_new = [x for x in range(1, n+1)]
# print(num_new)
#
# parzyste = list(filter(lambda x: x%2 == 0, num_new))
# print(parzyste)
#
# nieprzyste = list(filter(lambda x: x%2 != 0, num_new))
# # print(nieprzyste)
#
# # liczy sumę
# result = (lambda x, y : x + y)(10,20)
# print(result)
#
# # liczy sześcian sumy argumentów
#
# szescian = (lambda a, b: (a+b)**3)(int(input()), int(input()))
# print(szescian)


# liczy sumę pierwiastków argumentów
# pierwiastek = (lambda a, b: (a*(1/2))+(b*(1/2)))(int(input()), int(input()))
# print(pierwiastek)


# daje odpowiedź True jeżeli argumenty są równe,  False w przeciwnym razie
# sprawdz = (lambda a, b: print("True") if (a==b) else print("False"))(int(input()), int(input()))

# generuje słownik złożony z argumentu i litery odpowiadającej po przesunięciu
# o 3 (porównaj szyfr Cezara)
# HW!!!!!!!!
#
# przesun = int(input())
# litera_1 = str(input())
# count_1 = 0
#
# alfabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i",
#            "j", "k", "l", "m", "n", "o", "p", "r", "s",
#            "t", "u", "w", "x", "y", "z"]
# slownik = {}
#
# for i in alfabet:
#   count_1 = count_1 + 1
#   if i == litera_1:
#     slownik[litera_1] = alfabet[count_1+(przesun-1)]
#     break
#
# print(count_1)
# print(slownik)




"""### Zadanie 
Rozwiąż zadane problemy rekurencyjnie. Z pierwszych trzech funkcji utwórz moduł. Zaimportuj go. Wywołaj funkcje i  wypisz informacje o nich (docstring)

- Napisać funkcję  która oblicza następująco zdefiniowane sumy: 
$$ H(n) = 1+\frac{1}{2} +\frac{1}{3}+\frac{1}{4}+\dots+\frac{1}{n}, \text{ dla } n>0, $$
"""
# n = int(input())
# suma_n = 0
#
# for i in range(1, n+1):
#   # print(i)
#   suma_n = suma_n + 1/(i)
#
# print(suma_n)
#



# def suma(n):
#   if n==1:
#     return 1
#   else:
#     return 1/n + suma(n-1)
#
# print(suma(int(input())))



"""
$$ H(n) = 1+\frac{1}{4} +\frac{1}{9}+\frac{1}{16}+\dots+\frac{1}{n^2} \text{ dla }n>0,$$
"""
# #
# n = int(input())
# suma_n = 0
#
# for i in range(1, n+1):
#   # print(i)
#   suma_n = suma_n + 1/i**2
#
# print(suma_n)
#

#
# def suma(n):
#   if n==1:
#     return 1
#   else:
#     return 1/n**2 + suma(n-1)
#
# print(suma(int(input())))



"""
$$ H(n) = 1+2+3+\dots +n, \text{ dla } n>0,$$
"""


# n = int(input())
# suma_n = 0
#
# for i in range(n+1):
#   # print(i)
#   suma_n = suma_n + i
#
# print(suma_n)


# def suma(n):
#   if n==1:
#     return 1
#   else:
#     return n + suma(n-1)
#
# print(suma(int(input())))



"""
- Napisz funkcję,  wyznaczjącą element o indeksie 15 ciągu podanego wzorem rekurencyjnym.
  $$ b_1 = 8, \quad b_{n+1} = 4* b_{n} -6 *n$$
"""

#
# def b(n):
#   if n==1:
#     return 8
#   else:
#     return 4 * b(n-1) - 6 * (n-1)
#
# print(b(2))




"""
- Napisz funkcję,  wyznaczjącą element o indeksie 15 ciągu podanego wzorem rekurencyjnym.
  $$ c_1 = 3,  \quad c_2 = 4,\quad c_{n+1} = c_{n-1} +2*c_{n}$$
"""
#
# def b(n):
#   if n==1:
#     return 8
#   else:
#     return 4 * b(n-1) - 6 * (n-1)
#
# print(b(2))


#
# def b(n):
#   if n==1:
#     return 3
#   elif n == 2:
#     return 4
#   else:
#     return 4 * b(n-1) - 6 * (n-1)
#
# print(b(2))





"""
- Napisz program, który zapisze podaną liczbą dziesiętną naturalną w~systemie binarnym.
"""


# def bin(a):
#   binarna = ""
#   temp = a
#   while temp > 0:
#     binarna = str(temp % 2) + binarna
#     temp = int(temp/2)
#   return binarna
#
# print(bin(8))


# rekurencaj
# def bin(n):
#   if n > 1:
#     bin(n // 2)
#   print(n % 2, end='')
#
# bin(7)





"""
- Napisz program, który wyznaczy sumę cyfr liczby naturalnej.

"""

# def suma_cyf(a):
#   suma = 0
#   temp = a
#   while temp > 0:
#     suma = temp % 10 + suma
#     temp = int(temp/10)
#   return suma
#
# print(suma_cyf(1234))


# rekurencaj
# def suma(n):
#   if n == 0:
#     return 0
#   else:
#     return (n % 10 + suma(n // 10))
#
# print(suma(1234))


"""
program który policzy sume cyfr danel liczby
"""


# zrób to iteracyjnie

# HW!!!!!!!!!!!!!!!!!!!!!!!
#
# ile = int(input())
#
# def suma_cyfr():
#   suma = 0
#   print(ile)
#   for i in range(ile+1):
#     print(i)
#     suma = suma + i
#   print("wynik sumy liczby: " + str(ile) + "    wynosi: " + str(suma))
#
# suma_cyfr()
#

# suma cyfr iteracyjnie
# def suma_n(n):
#   suma_cyfr = 0
#   while n > 0:
#     suma_cyfr += n % 10
#     n = (n // 10)
#   print(suma_cyfr)
#
# suma_n(123)


# # suma cyfr rekurencja
# def suma_cyfa(n):
#   if n == 0:
#     return 0
#   else:
#     # n % 10 bierze ostatnią cyfre zawsze
#     return suma_cyfa(n // 10) + n % 10
#
# print(suma_cyfa(212))



# rekurencja
# def ile(n):
#   if n == 0:
#     return 0
#   else:
#     return ile(n // 10) + 1
#
# print(ile(200))



"""
- Napisz program wyznaczający potęgę danej liczby.
"""

#FOR
# def licz(liczba, potęga):
#   wynik = liczba
#   if potęga == 0:
#     return 1
#   else:
#     for i in range(1, potęga):
#       wynik = wynik * liczba
#   print(wynik)
#
# licz(int(input()), int(input()))
#

# With While
# def licz(liczba, potęga):
#   i = 1
#   wynik = liczba
#   if potęga == 0:
#     return 1
#   while i < potęga:
#     i = i + 1
#     wynik = wynik * liczba
#   print(wynik)
#
# licz(3, 2)


#
# # rekurencja
# def licz(liczba, potęga):
#   i = 1
#   wynik = liczba
#   if potęga == 0:
#     return 1
#   else:
#     return licz(liczba, potęga-1) * liczba
#
# print(licz(2, 2))
#




"""
- Podaj rekurencyjną definicję funkcji *void piramida(int level)* której 
  zadaniem jest narysowanie na ekranie następującej piramidy:

#### $*****$
#### $****$
#### $***$
#### $**$
#### $*$
"""

# # iteracyjnie
# def piramida(level):
#   for i in range(1, level + 1):
#     # print(i)
#     print("#### " + "$" + i*"*" + "$")
#   return ""
#
# print(piramida(5))


# # rekurencja
# def piramida(level):
#   if level==0:
#     return ""
#   else:
#     print("#### " + "$" + level * "*" + "$")
#     return piramida(level-1)
#
# print(piramida(3))




"""
#### Zadanie 
LCG (linear congruential generator) wyznaczony jest przez metodę rekurencyjną

> $X_{n+1}=(a*X_n+c) \mod m$

Stan początkowy x0 to wartość ziarna (zalążka).
Zakoduj LCG (iteracyjnie). Przetestuj LCG.
https://en.wikipedia.org/wiki/Linear_congruential_generator
"""



"""
#### Zadanie
A palindromic number reads the same both ways. 
The largest palindrome made from the product of two 2-digit numbers is $9009 = 91 \times 99$. 
Find the largest palindrome made from the product of two 3-digit numbers.
"""



"""#### Zadanie
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 100.
"""
# def numbers(liczba):
#   suma = 0
#   for i in range(liczba):
#     if i % 3 == 0 or i % 5 == 0:
#       suma = suma + i
#   print(suma)
#
# numbers(100)


"""
#### Zadanie 
Dziennik to słownik:klucz to krotka składająca się z imienia i nazwiska, wartość to lista z ocenami.

Napisz funkcję (ewentualnie poproś użytkownika o podanie imienia i nazwiska ucznia oraz oceny - to powinny 
być osobne funkcje) i uaktualnij listę ocen danego ucznia o tę ocenę.
"""

dziennik = {("Piotr", "Nowicki"): [1, 2, 5],
            ("Tomek", "Rambo"): [4, 3, 3],
            ("Pawel", "Sroka"): [6, 6, 6],
            }

def imie_naz(dziennik):
  x = list(dziennik.keys())
  for i in range(len(x)):
    print(x[i])

imie_naz(dziennik)


def oceny(dziennik):
  y = list(dziennik.values())
  for j in range(len(y)):
    print(y[j])

oceny(dziennik)



# HW!!
#
# 1. pytaj o imie + nazwisko
# 2. pytaj o ocene jaką mamy dodać
# 3. apped tą ocenę do listy



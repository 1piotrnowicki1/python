# -*- coding: utf-8 -*-
"""is_aip_lab04_pzo2_zadania04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10qqNYR0knFVVYlyGAodxB-zDHZOji51t

## IS, AiP
### Praca domowa 04

Proszę dekomponować problemy (używać klas i funkcji).
"""





"""### Zad PD0401. Weganie z klasą - hierarchia klas roślinek spożywczych.
Proszę stworzyć hierarchię klas. Strzałki oznaczają takie dziedziczenie jak na obrazku w pliku *lab04*.

    Wege: 4 dowolne atrybuty, gettery, settery, __str__, __repr__
    ...Owoc -> Wege
    ......Gruszka -> Owoc
    ......Jablko -> Owoc
    ......Hurma -> Owoc
    ...Orzech -> Wege
    ......OrzechWloski -> Orzech
    ......OrzechLaskowy -> Orzech

Do każdej klasy proszę stworzyć po 1 przykładowej instancji (punktowane).
"""

# kod tutaj

# testy tutaj (przykłady)



"""### Zad PD0402. Samochody.
Proszę stworzyć hierarchię klas. Strzałki oznaczają takie dziedziczenie jak na obrazku w pliku *lab03*.

    Car: 4 dowolne atrybuty, gettery, settery, __str__, __repr__
    ...ExclusiveCar -> Car: +2 dowolne atrybuty
    ...SportCar -> Car: +2 dowolne atrybuty
    ...OffRoadCar -> Car: +2 dowolne atrybuty
    ...ExclusiveSportCar -> SportCar oraz ExclusiveCar
    ...ExclusiveOffRoadCar -> OffRoadCar oraz ExclusiveCar
    
Do każdej klasy proszę stworzyć po 1 przykładowej instancji (punktowane).
"""

# kod tutaj

# testy tutaj (przykłady)
class Car:
    '''
       Obiekt Samochod opisuje nam samochod klienta.

       Samochody opisujemy marka i kolorem.

       :param str marka: marka samochodu
       :param str kolor: kolorw zamochodu

       :method str naprzod: zwraca opis jadacego samochodu -> str
    '''
    def __init__(self, marka, kolor):
        self.marka = marka
        self.kolor = kolor

    def __str__(self):
        ret = f"car marki {self.marka}, jest koloru {self.kolor}"
        return ret

    def get_marka_kolor(self):
        return self.marka, self.kolor

    def sprawdz_marka_kolor(self, marka, kolor):
        assert isinstance(marka, str), 'marka musi bys str'
        assert isinstance(kolor, str), 'kolor musi bys str'
        return

    def set_marka_kolor(self, marka, kolor):
        __class__.sprawdz_marka(marka, kolor)
        self.marka = marka
        self.kolor = kolor
        return ""


class ExclusiveCar(Car):
    def __init__(self, marka, kolor, max_speed, przyspieszenie, skrzynia):
        super().__init__(marka, kolor)
        self.max_speed = max_speed
        self.przyspieszenie = przyspieszenie
        self.skrzynia = skrzynia

    def __str__(self):
        ret = f"ExclusiveCar marki {self.marka}, jest koloru {self.kolor}, jego prędkość max to: {self.max_speed}, przyspiesza {self.przyspieszenie} sec do 100, i ma skrzenie biegów {self.skrzynia} "
        return ret

    def get_max_speed(self):
        return self.max_speed

    def get_przyspieszenia(self):
        return self.przyspieszenie

    def get_skrzynia(self):
        return self.skrzynia

    def sprawdz_ExclusiveCar_car(max_speed, przyspieszenie, skrzynia):
        assert isinstance(max_speed, int), 'max_speed musi bys int'
        assert isinstance(przyspieszenie, int), 'przyspiesznie musi bys int'
        assert isinstance(skrzynia, str), 'przyspiesznie musi bys int'
        assert max_speed > 0, 'max_speed >= 0'
        assert przyspieszenie > 0, 'max_speed >= 0'
        return

    def set_numer(self, numer):
        __class__.sprawdz_numer(numer)
        self.numer = numer
        return ""

"""### Zad PD0403
Zaprogramuj klasę `Rakieta`, podobnie jak w PD02. Funkcjonalność:

Atrybuty klasy
* masa rakiety
* prędkość maksymalna
* get / set pozycja, x, y
* maksymalna ilość lotów: jeżeli rakieta wystartuje tą ilość razy to kolejny już nie może
* przesunięcie: w prawo, w lewo, w dół, w górę
* lądowanie
* powrót do bazy (0, 0)
* odległość od bazy (Pitagoras!)
* ilość paliwa
* numer seryjny - patrz wytłumaczenie poniżej

Atrybuty instancji
* położenie: x, y
* ilość lotów
* tracker trasy rakiety (zapamietywanie kolejnych lokalizacji rakiety)
* zuzycie paliwa

Nadaj rakiecie **indywidualny numer seryjny**, począwszy od "R01". Numer nie powinien być większy niż "R99", potem linia produkcyjna rakiet powinna się zatrzymać. Zerknij w poniższy snippet i go zaadaptuj dla Rakiety:

```
class Obiekt(object):
    nr_seryjny = 1  # parametr klasy

    def __init__(self):
        self.nr_seryjny = self.__class__.nr_seryjny  # parametr instancji
        self.zwieksz_nr_seryjny()
        
    def zwieksz_nr_seryjny(self):
        self.__class__.nr_seryjny += 1
```
"""

# kod tutaj

# testy tutaj (przykłady)



"""### Zad PD04X. Generator docstringa Sphinx/Pydoc
Napisz funkcję `gen_doc_pydoc(d, sep=False)` generującą docstring w typie Sphinx/Pydoc, bazując na definicji funkcji `__init__`. Funkcja powinna pobierać zestaw parametrów w postaci słownika

    {'Args': None, 'Returns': None, 'Raises': None, 'Attributes': None, 'Summary': None, 'Description': None}

i generować poprawny docstring (w odpowiedniej kolejności).

    >>> print(gen_doc_pydoc({'Args': ['a', 'b'],
                'Attributes': ['a', 'b', 'c'],
                'Summary': "Obiekt OBIEKT opisuje nam wlasnosci obiektu.",
                'Description': 'Tutaj powinien byc nieco dluzszy tekst opisujacy klase Obiekt. Moze kiedys bedzie to mialo sens, ale na razie nie ma.'}))
    '''
    Obiekt OBIEKT opisuje nam wlasnosci obiektu.
    
    Tutaj powinien byc nieco dluzszy tekst opisujacy klase Obiekt.
    Moze kiedys bedzie to mialo sens, ale na razie nie ma.
    
    :param TYPE a:
    :param TYPE b:
    :ivar TYPE a: tu przechowujemy wartosc zmiennej a
    :ivar TYPE b: tu przechowujemy wartosc zmiennej b
    :ivar TYPE c: tu przechowujemy wartosc zmiennej c    

    :Example:

    '''

lub
    
    >>> print(gen_doc_pydoc({'Args': ['a', 'b'],
                'Attributes': ['a', 'b', 'c'],
                'Summary': "Obiekt OBIEKT opisuje nam wlasnosci obiektu.",
                'Description': 'Tutaj powinien byc nieco dluzszy tekst opisujacy klase Obiekt. Moze kiedys bedzie to mialo sens, ale na razie nie ma.'},
                sep=True))
    '''
    Obiekt OBIEKT opisuje nam wlasnosci obiektu.
    
    Tutaj powinien byc nieco dluzszy tekst opisujacy klase Obiekt.
    Moze kiedys bedzie to mialo sens, ale na razie nie ma.
    
    :param a:
    :type a: TYPE
    :param b:
    :type a: TYPE
    :ivar a: tu przechowujemy wartosc zmiennej a
    :vartype a: TYPE
    :ivar b: tu przechowujemy wartosc zmiennej b
    :vartype d: TYPE
    :ivar c: tu przechowujemy wartosc zmiennej c
    :vartype c: TYPE
    
    :Example:

    '''
    
"""

# kod tutaj

# testy tutaj (przykłady)



"""### Pytanie domowe
Dlaczego w części opisującej atrybuty klasy i instancji zmiana atrybutu klasy z poziomu instancji jest permanentna dla danej instancji?
"""

